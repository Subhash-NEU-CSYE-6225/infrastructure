AWSTemplateFormatVersion: "2010-09-09"
Description: CSYE 6225
Parameters:
  VpcCidrBlock:
    Description: "CIDR block for VPC"
    Type: String
    Default: "10.0.0.0/16"
  RouteTableName:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: "Route Table"
  privateRouteTableName:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: "Private Route Table"
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues: [t2.micro]
    ConstraintDescription: must be a valid EC2 instance type
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    Default: 0.0.0.0/0
    ConstraintDescription: must be a valid IP CIDR range of the forn x.x.x.x/x
  LatestAmiId:
    Type: 'AWS::EC2::Image::Id'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  Subnet1Name:
    Description: "Name of first Subnet"
    Type: String
    Default: "Subnet1"
  Subnet2Name:
    Description: "Name of Second Subnet"
    Type: String
    Default: "Subnet2"
  Subnet3Name:
    Description: "Name of third Subnet"
    Type: String
    Default: "Subnet3"
  publicSubnet1Name:
    Description: "Name of the first public Subnet"
    Type: String
    Default: "publicSubnet1"
  Subnet1CidrBlock:
    Description: "CidrBlock of first Subnet"
    Type: String
    Default: "10.1.1.0/24"
  Subnet2CidrBlock:
    Description: "CidrBlock of Second Subnet"
    Type: String
    Default: "10.1.2.0/24"
  Subnet3CidrBlock:
    Description: "CidrBlock of third Subnet"
    Type: String
    Default: "10.1.3.0/24"
  publicSubnet1CidrBlock:
    Description: "CidrBlock of first public Subnet"
    Type: String
    Default: "10.1.4.0/24"
  Subnet1AvailabilityZone:
    Description: "Availability Zone of first Subnet"
    Type: String
    Default: "us-east-1a"
  Subnet2AvailabilityZone:
    Description: "Availability Zone of second Subnet"
    Type: String
    Default: "us-east-1b"
  Subnet3AvailabilityZone:
    Description: "Availability Zone of third Subnet"
    Type: String
    Default: "us-east-1c"
  publicSubnet1AvailabilityZone:
    Description: "Availability Zone of first public Subnet"
    Type: String
    Default: "us-east-1d"
  DBName:
    Type: String
    Default: "csye6225"
  DBUsername:
    Type: String
    Default: "csye6225"
  DBPassword:
    Type: String
    Default: "ece18670!"
  DatabaseSecurityGroup:
    Type: String
    Default: "database security group"
  BucketName:
    Type: String
    Default: "assets.subhashcsye6225.me"
  IAMRoleName:
    Type: String
    Default: "EC2-CSYE6225"
  HostedZoneName:
    Description: "HostedZoneName"
    Type: String
    Default: "dev.subhashcsye6225.me."
  envName:
    Type: String
    Default: dev
  LambdaBucketName:
    Type: String
    Default: lambabucket.subhashcsye6225.me
Resources:
  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: 'default'
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName
  myInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: 
        Ref: myInternetGateway
      VpcId:
        Ref: myVPC
  mySubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !Ref Subnet1CidrBlock
      AvailabilityZone: !Ref Subnet1AvailabilityZone
      Tags:
      - Key: Name
        Value: !Ref Subnet1Name
  mySubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !Ref Subnet2CidrBlock
      AvailabilityZone: !Ref Subnet2AvailabilityZone
      Tags:
      - Key: Name
        Value: !Ref Subnet2Name
  mySubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !Ref Subnet3CidrBlock
      AvailabilityZone: !Ref Subnet3AvailabilityZone
      Tags:
      - Key: Name
        Value: !Ref Subnet3Name
  publicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !Ref publicSubnet1CidrBlock
      AvailabilityZone: !Ref publicSubnet1AvailabilityZone
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: !Ref publicSubnet1Name
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: !Ref privateRouteTableName
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: !Ref RouteTableName
  mySubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref mySubnet1
  mySubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref mySubnet2
  mySubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref mySubnet3
  publicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref publicSubnet1
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref myInternetGateway
  PrivateRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 12.0.1.0/24
      GatewayId: !Ref myInternetGateway
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      SecurityGroupIds:
        - !Ref ApplicationSecurityGroup
      KeyName: !Ref KeyName
      ImageId: !Ref LatestAmiId
      SubnetId: !Ref publicSubnet1
      IamInstanceProfile: !Ref EC2InstanceProfile
      BlockDeviceMappings:
        - DeviceName: /dev/sdm
          Ebs:
            VolumeType: gp2
            VolumeSize: '50'
            DeleteOnTermination: true
      UserData:
          Fn::Base64: !Sub
          - |
            #!/bin/bash
            echo "{\"AWS_BUCKET_REGION\":\"${AWS::Region}\",\"DB_NAME\":\"${DBName}\",\"DB_PASSWORD\":\"${DBPassword}\",\"DB_USER_NAME\":\"${DBUsername}\",\"DB_ADDRESS\":\"${RDSInstance.Endpoint.Address}\",\"AWS_BUCKET_NAME\":\"${AWS::StackName}.${BucketName}\",\"ARN\":\"${SNSTopic}\"}" > /etc/environment.json
            sudo chmod 755 /home/ubuntu/logs
            sudo chmod 777 /home/ubuntu/logs
            sudo systemctl enable webapplication.service
            sudo systemctl start webapplication.service
            sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/home/ubuntu/AmazonCloudWatch-agent-config.json -s
          - {
            }
  ApplicationSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref myVPC
      GroupDescription: Enable SSH access via port 22 and http access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref 'SSHLocation'
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref 'SSHLocation'
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref 'SSHLocation'
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: !Ref 'SSHLocation'
  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Ingress Rule to allow port"
      GroupName: !Ref DatabaseSecurityGroup
      VpcId: !Ref myVPC
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref ApplicationSecurityGroup
          IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join ["", [!Ref AWS::StackName, ".", !Ref BucketName]]
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: "aws:kms"
      LifecycleConfiguration:
        Rules:
          - Id: Rule for transition of data
            Status: "Enabled"
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
      PublicAccessBlockConfiguration:
        BlockPublicAcls : true
        BlockPublicPolicy : true
        IgnorePublicAcls : true
        RestrictPublicBuckets : true
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "Private subnets group for DB"
      DBSubnetGroupName: DBSubnetGroup
      SubnetIds:
        - Ref: mySubnet1
        - Ref: mySubnet2
        - Ref: mySubnet3
  RDSParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Description: RDS Parameter group for Postgres
      Family: postgres13
      Parameters:
        rds.force_ssl: 1
      Tags:
        - Key: RDSParameterGroup
          Value: PostgresParameterGroup
  RDSInstance:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Delete
    Properties:
      VPCSecurityGroups:
        - Ref: DBSecurityGroup
      Engine: postgres
      AllocatedStorage: 5
      DBInstanceClass: db.t3.micro
      MultiAZ: false
      DBInstanceIdentifier: !Ref DBName
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      DBSubnetGroupName: !Ref DBSubnetGroup
      PubliclyAccessible: false
      DBName: !Ref DBName
      DBParameterGroupName: !Ref RDSParameterGroup
  CodeDeployeEC2ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref IAMRoleName
      Description: IAM Role of WebApp and S3
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
      ManagedPolicyArns:
          - "arn:aws:iam::aws:policy/CloudWatchAgentAdminPolicy"
  WebAppS3EC2IAMPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "s3:GetObject"
              - "s3:PutObject"
              - "s3:DeleteObject"
            Resource:
              - !GetAtt S3Bucket.Arn
              - !Sub '${S3Bucket.Arn}/*'
      PolicyName: "WebAppS3"
      Roles:
        - !Ref CodeDeployeEC2ServiceRole
  EC2InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      InstanceProfileName: EC2InstanceProfile
      Path: "/"
      Roles:
        - !Ref CodeDeployeEC2ServiceRole
  Route53Record:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Ref HostedZoneName
      Name: !Ref HostedZoneName
      ResourceRecords:
        - !GetAtt EC2Instance.PublicIp
      TTL: 60
      Type: A
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: TokenTable
      BillingMode: PROVISIONED
      AttributeDefinitions:
        - AttributeName: username
          AttributeType: S
        - AttributeName: token
          AttributeType: S
      KeySchema:
        - AttributeName: username
          KeyType: HASH
        - AttributeName: token
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1 
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      Tags:
      - Key: DynamoDBTableName
        Value: !Sub '${AWS::StackName}-dynamoDB-table'
  EmailListTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: EmailListTable
      BillingMode: PROVISIONED
      AttributeDefinitions:
        - AttributeName: username
          AttributeType: S
      KeySchema:
        - AttributeName: username
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1 
      Tags:
      - Key: DynamoDBTableName
        Value: !Sub '${AWS::StackName}-EmailListTable'
  SNSTopic:
    Type: AWS::SNS::Topic
    DependsOn:
      - LambdaFunction
    Properties:
      DisplayName: UserVerificationTopic
      TopicName: UserVerificationTopic
      Subscription:
        - Endpoint: !GetAtt LambdaFunction.Arn
          Protocol: lambda
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-sns-topic'
  LambdaSNSPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - SNSTopic
    Properties: 
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaFunction.Arn
      Principal: sns.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Ref SNSTopic
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      RoleName: lambda-execution-role
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
  LambdaPolicy:
    Type: AWS::IAM::Policy
    DependsOn:
      - SNSTopic
      - DynamoDBTable
      - EmailListTable
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "dynamodb:GetItem"
              - "dynamodb:PutItem"
              - "dynamodb:UpdateItem"
            Resource:
              - !GetAtt DynamoDBTable.Arn
              - !GetAtt EmailListTable.Arn
          - Effect: Allow
            Action:
              - "ses:SendEmail"
              - "ses:SendRawEmail"
            Resource:
              - !Sub arn:aws:ses:${AWS::Region}:${AWS::AccountId}:identity/${envName}.subhashcsye6225.me
          - Effect: Allow
            Action:
              - "sns:ListTopics"
              - "sns:CreateTopic"
              - "sns:GetTopicAttributes"
              - "sns:Publish"
              - "sns:ConfirmSubscription"
            Resource:
              - !Ref SNSTopic
      PolicyName: "LambdaPolicy"
      Roles:
        - !Ref LambdaExecutionRole
        - !Ref CodeDeployeEC2ServiceRole
  LambdaFunction:
    Type: AWS::Lambda::Function
    DependsOn:
      - LambdaExecutionRole
    Properties:
      Code:
        ZipFile: import json
      Description: Lambda function for verification emails
      Environment:
        Variables:
          DomainName: !Sub ${envName}.subhashcsye6225.me
      Layers: 
        - "arn:aws:lambda:us-east-1:540611298233:layer:SendGrid:1"
      FunctionName: emailVerification
      Handler: index.emailVerification
      MemorySize: 128
      PackageType: Zip
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.7
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-lambdaFunction
      Timeout: 15
Outputs:
    VpcId:
      Description: The VPC ID
      Value: !Ref myVPC
    SubnetIds:
      Description: The Subnet ID
      Value: !Join [ ",", [ !Ref mySubnet1, !Ref mySubnet2 ]]
