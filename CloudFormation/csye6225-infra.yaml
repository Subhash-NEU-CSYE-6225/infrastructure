AWSTemplateFormatVersion: "2010-09-09"
Description: CSYE 6225
Parameters:
  VpcCidrBlock:
    Description: "CIDR block for VPC"
    Type: String
    Default: "10.0.0.0/16"
  RouteTableName:
    Description: An environment name that is prefixed to resource names
    Type: String
  privateRouteTableName:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: "privateRouteTableName"
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues: [t2.micro]
    ConstraintDescription: must be a valid EC2 instance type
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    Default: 0.0.0.0/0
    ConstraintDescription: must be a valid IP CIDR range of the forn x.x.x.x/x
  LatestAmiId:
    Type: 'AWS::EC2::Image::Id'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  Subnet1Name:
    Description: "Name of first Subnet"
    Type: String
    Default: "Subnet1"
  Subnet2Name:
    Description: "Name of Second Subnet"
    Type: String
    Default: "Subnet2"
  Subnet3Name:
    Description: "Name of third Subnet"
    Type: String
    Default: "Subnet3"
  publicSubnet1Name:
    Description: "Name of the first public Subnet"
    Type: String
    Default: "publicSubnet1"
  Subnet1CidrBlock:
    Description: "CidrBlock of first Subnet"
    Type: String
    Default: "10.1.1.0/24"
  Subnet2CidrBlock:
    Description: "CidrBlock of Second Subnet"
    Type: String
    Default: "10.1.2.0/24"
  Subnet3CidrBlock:
    Description: "CidrBlock of third Subnet"
    Type: String
    Default: "10.1.3.0/24"
  publicSubnet1CidrBlock:
    Description: "CidrBlock of first public Subnet"
    Type: String
    Default: "10.1.4.0/24"
  Subnet1AvailabilityZone:
    Description: "Availability Zone of first Subnet"
    Type: String
    Default: "us-east-1a"
  Subnet2AvailabilityZone:
    Description: "Availability Zone of second Subnet"
    Type: String
    Default: "us-east-1b"
  Subnet3AvailabilityZone:
    Description: "Availability Zone of third Subnet"
    Type: String
    Default: "us-east-1c"
  publicSubnet1AvailabilityZone:
    Description: "Availability Zone of first public Subnet"
    Type: String
    Default: "us-east-1d"
  HostedZoneName:
    Description: "HostedZoneName"
    Type: String
    Default: "dev.subhashcsye6225.me"
  DatabaseSecurityGroup:
    Type: String
    Default: "database security group"
  BucketName:
    Type: String
    Default: "assets.subhashcsye6225.me"
Resources:
  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: 'default'
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName
  myInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: 
        Ref: myInternetGateway
      VpcId:
        Ref: myVPC
  mySubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !Ref Subnet1CidrBlock
      AvailabilityZone: !Ref Subnet1AvailabilityZone
      Tags:
      - Key: Name
        Value: !Ref Subnet1Name
  mySubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !Ref Subnet2CidrBlock
      AvailabilityZone: !Ref Subnet2AvailabilityZone
      Tags:
      - Key: Name
        Value: !Ref Subnet2Name
  mySubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !Ref Subnet3CidrBlock
      AvailabilityZone: !Ref Subnet3AvailabilityZone
      Tags:
      - Key: Name
        Value: !Ref Subnet3Name
  publicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !Ref publicSubnet1CidrBlock
      AvailabilityZone: !Ref publicSubnet1AvailabilityZone
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: !Ref publicSubnet1Name
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: !Ref RouteTableName
  mySubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref mySubnet1
  mySubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref mySubnet2
  mySubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref mySubnet3
  publicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref publicSubnet1
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref myInternetGateway
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      SecurityGroupIds:
        - !Ref ApplicationSecurityGroup
      KeyName: !Ref KeyName
      ImageId: !Ref LatestAmiId
      SubnetId: !Ref publicSubnet1
      BlockDeviceMappings:
        - DeviceName: /dev/sdm
          Ebs:
            VolumeType: gp2
            VolumeSize: '50'
            DeleteOnTermination: true
  ApplicationSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref myVPC
      GroupDescription: Enable SSH access via port 22 and http access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref 'SSHLocation'
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref 'SSHLocation'
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref 'SSHLocation'
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: !Ref 'SSHLocation'
  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Ingress Rule to allow port"
      GroupName: !Ref DatabaseSecurityGroup
      VpcId: !Ref myVPC
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref ApplicationSecurityGroup
          IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join ["", [!Ref AWS::StackName, ".", !Ref BucketName]]
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: "aws:kms"
      LifecycleConfiguration:
        Rules:
          - Id: Rule for transition of data
            Status: "Enabled"
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
      PublicAccessBlockConfiguration:
        BlockPublicAcls : true
        BlockPublicPolicy : true
        IgnorePublicAcls : true
        RestrictPublicBuckets : true
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "Private subnets group for DB"
      DBSubnetGroupName: DBSubnetGroup
      SubnetIds:
        - Ref: mySubnet1
        - Ref: mySubnet2
        - Ref: mySubnet3
  RDSParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Description: RDS Parameter group for Postgres
      Family: postgres13
      Parameters:
        rds.force_ssl: 1
      Tags:
        - Key: RDSParameterGroup
          Value: PostgresParameterGroup
  RDSInstance:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Delete
    Properties:
      VPCSecurityGroups:
        - Ref: DBSecurityGroup
      Engine: postgres
      AllocatedStorage: 5
      DBInstanceClass: db.t3.micro
      MultiAZ: false
      DBInstanceIdentifier: csye6225
      MasterUsername: csye6225
      MasterUserPassword: ece18670!
      DBSubnetGroupName: !Ref DBSubnetGroup
      PubliclyAccessible: false
      DBName: csye6225
      DBParameterGroupName: !Ref RDSParameterGroup
  Route53Record:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Ref HostedZoneName
      Name: !Ref HostedZoneName
      ResourceRecords:
        - !GetAtt EC2Instance.PublicIp
      TTL: 60
      Type: A
Outputs:
    VpcId:
      Description: The VPC ID
      Value: !Ref myVPC
    SubnetIds:
      Description: The Subnet ID
      Value: !Join [ ",", [ !Ref mySubnet1, !Ref mySubnet2 ]]
